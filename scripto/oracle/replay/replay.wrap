#!/bin/bash
# $Header: /CVS/cvsadmin/cvsrepository/admin/scripto/oracle/replay/replay.wrap,v 1.6 2011/06/16 11:51:45 remikcvs Exp $
#
# !!!! D A N G E R !!!
#
# This script is very powerfull and as such very dangerous. 
# Use with utmost caution.
#
# Used to issue the same SQL statement on multiple databases 
#
# The list of username#tns_alias pairs is stored in $DB_LIST
# The commands to be executed are stored in $SQL_FILE
#
#INFO_MODE=DEBUG


LOCKFILE=/tmp/replay_sql.lock
TMP_FILE=/tmp/replay_sql.tmp

SQL_FILE=${HOME}/scripto/oracle/replay/replay.sql
DB_LIST=${HOME}/scripto/oracle/replay/replay.dblist

F_CRED_FILE=~/.credentials
PWD_FILE=~/.passwords
V_PASS_SOURCING=hash

# Load usefull functions
if [ ! -f $HOME/scripto/bash/bash_library.sh ]; then
  echo "[error] $HOME/scripto/bash/bash_library.sh not found. Exiting. "
  exit 1
else
  . $HOME/scripto/bash/bash_library.sh
fi
RECIPIENTS='remigiusz.boguszewicz@gmail.com'
check_lock $LOCKFILE
check_file $SQL_FILE
check_file $DB_LIST

# Set lock file
#touch $LOCKFILE

date
echo -n -e '\E[35m'
echo "The following command:"
echo -n -e '\E[30m'

SQL_FILE_CONTENT=`cat ${SQL_FILE}`
echo $SQL_FILE_CONTENT

echo -n -e '\E[35m'
echo "Is going to be SQL executed on the following hosts:"
echo -n -e '\E[30m'
cat $DB_LIST

#echo -n -e '\E[35m'
#read -p "Do you REALLY want to execute the above SQL command on databases in selected hosts (yes/no)? " REPLY
#echo -n -e '\E[30m'
#if [ ! "$REPLY" = "yes" ]; then 
#  echo "User aborded mission." 
#  exit 1
#fi



# Loop through DB_LIST try to PING all entries
exec 3<> $DB_LIST
while read line <&3
do {
  # filter out lines that are comments
  line=`echo $line | grep -v "^#" | grep -v "^--"`
  if [ -z "$line" ]; then
    continue
  fi
  
  V_USER=`echo $line | awk -F"#" '{ print $1 }'`
  CN=`echo $line | awk -F"#" '{ print $2 }'`
  msgd "V_USER: $V_USER"
  msgd "CN: $CN"
  check_variable $V_USER
  check_variable $CN
  
  #echo -e '\E[30m black \E[31mred \E[32mgreen \E[33myellow \E[34mblue \E[35mmagenta \E[36mcyan \E[37mwhite'
  #echo -e '\E[30m black'
  
  # Sanity check

if [ ${V_PASS_SOURCING} = "source" ]; then
  msgd "Getting password from sourcing file"
  # Sourcing the password variables
  check_file $F_CRED_FILE
  . $F_CRED_FILE

elif [ ${V_PASS_SOURCING} = "hash" ]; then
  msgd "Getting password from hash"

  INDEX_HASH=`$HOME/scripto/perl/ask_ldap.pl "(cn=$CN)" "['orainfDbRrdoraIndexHash']" 2>/dev/null | grep -v '^ *$' | tr -d '[[:space:]]'`
  msgd "INDEX_HASH: $INDEX_HASH"
  check_parameter $INDEX_HASH
  HASH=`echo "$INDEX_HASH" | base64 --decode -i`
  msgd "HASH: $HASH"
  if [ -f "$PWD_FILE" ]; then
    V_PASS=`cat $PWD_FILE | grep "$HASH " | awk '{print $2}' | base64 --decode -i`
    #msgd "V_PASS: $V_PASS"
  else
    msge "Unable to find the password file. Exiting"
    exit 0
  fi

else
  msge "Unknown method to retrieve password. Exiting"
  exit 0
fi

msgd "V_USER: $V_USER"
#msgd "V_PASS: $V_PASS"
check_variable $V_USER
check_variable $V_PASS

testavail=`sqlplus -S /nolog <<EOF
set head off pagesize 0 echo off verify off feedback off heading off
connect $V_USER/$V_PASS@$CN
select trim(1) result from dual;
exit;
EOF`

msgd "testavail: $testavail"
if [ "$testavail" != "1" ]; then
  msge "Not connected to $CN exiting !! Turn on DEBUG on check the logs."
  rm -f $LOCKFILE
  exit 0
else
  msgi "Running on: $CN as $V_USER"
fi

msgd "Executing SQL. Please wait"
sqlplus -S /nolog << EOF > $TMP_FILE
set head off pagesize 0 echo off verify off feedback off heading off
connect $V_USER/$V_PASS@$CN
$SQL_FILE_CONTENT
EOF

cat $TMP_FILE


}
done
exec 3>&-

# Upon exit, remove lockfile.
rm -f $LOCKFILE

filter {
  if [path] =~ "auth.log" {
     if "Accepted publickey" in [message] { drop{ } }
     if "session opened for user" in [message] { drop{ } }
     if "New session" in [message] { drop{ } }
     if "Received disconnect from" in [message] { drop{ } }
     if "Disconnected from user" in [message] { drop{ } }
     if "pam_unix(sshd:session)" in [message] { drop{ } }
     if "Waiting for processes to exit" in [message] { drop{ } }
     if "Removed session" in [message] { drop{ } }
     if "session closed for user" in [message] { drop{ } }
  }
  if [path] =~ "daemon.log" {
     if "Started Session" in [message] { drop{ } }
     if ".scope: Succeeded" in [message] { drop{ } }
     if "Removed slice User Slice of UID" in [message] { drop{ } }
     if "Stopped User Runtime Directory" in [message] { drop{ } }
     if "user-runtime-dir" in [message] { drop{ } }
     if "run-user-1000.mount" in [message] { drop{ } }
     if "Stopped User Manager for UID" in [message] { drop{ } }
     if "user@1000.service" in [message] { drop{ } }
     if "Exit the Session" in [message] { drop{ } }
     if "systemd-exit.service" in [message] { drop{ } }
     if "Reached target Shutdown" in [message] { drop{ } }
     if "Closed GnuPG cryptographic agent and passphrase cache" in [message] { drop{ } }
     if "gpg-agent-extra.socket" in [message] { drop{ } }
     if "GnuPG" in [message] { drop{ } }
     if "gpg-agent-ssh" in [message] { drop{ } }
     if "target Default" in [message] { drop{ } }
  }

  if [path] =~ "state-change.log" {
     if "Cached leader info PartitionState" in [message] { drop{ } }
     if "Changed state of replica" in [message] { drop{ } }
     if "Sending become-leader LeaderAndIsr" in [message] { drop{ } }
     if "Sending UpdateMetadata request PartitionState" in [message] { drop{ } }
     if "Received LeaderAndIsr request PartitionState" in [message] { drop{ } }
     if "Received response {error_code=0} for request UPDATE_METADATA" in [message] { drop{ } }
     if "Handling LeaderAndIsr request correlationId" in [message] { drop{ } }
     if "Stopped fetchers as part of become-leader request from controller" in [message] { drop{ } }
     if "Completed LeaderAndIsr request correlationId" in [message] { drop{ } }
     if "Received response {error_code=0" in [message] { drop{ } }
     if "Cached leader info PartitionState" in [message] { drop{ } }
  }

  if [path] =~ "controller.log" {
     if "New partition creation callback for" in [message] { drop{ } }
  }

  if [path] =~ "kafka_start.log" {
     if "Removed fetcher for partitions" in [message] { drop{ } }
     if "Loading producer state from offset 0 with message format" in [message] { drop{ } }
     if "Completed load of log with 1 segments, log start offset 0" in [message] { drop{ } }
     if "No checkpointed highwatermark is found for partition" in [message] { drop{ } }
     if "initial high watermark 0" in [message] { drop{ } }
     if "starts at Leader Epoch 0 from offset 0" in [message] { drop{ } }
     if "Added fetcher for partitions List" in [message] { drop{ } }
     if "INFO Created log for partition" in [message] { drop{ } }
  }

  if [path] =~ "server.log" {
     if "Removed fetcher for partitions" in [message] { drop{ } }
     if "Loading producer state from offset 0 with message format" in [message] { drop{ } }
     if "Completed load of log with 1 segments, log start offset 0" in [message] { drop{ } }
     if "No checkpointed highwatermark is found for partition" in [message] { drop{ } }
     if "initial high watermark 0" in [message] { drop{ } }
     if "starts at Leader Epoch 0 from offset 0" in [message] { drop{ } }
     if "Added fetcher for partitions List" in [message] { drop{ } }
  }
}

output {
      kafka {
        bootstrap_servers => "192.168.1.104:9092"
        codec => json
        topic_id => "remi_logs"
      }
    }

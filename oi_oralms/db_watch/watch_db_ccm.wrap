#!/bin/bash
# 
# This will execute somwthing like
# $ sqlplus read_only/xx@DEVNGFR2 @refresh.sql ccm_currently_running 5 5
# but will find password for you
#

# General variables
PWD_FILE=/home/orainf/.passwords

# Local variables
TMP_LOG_DIR=/tmp/watch_db_ccm
LOCKFILE=$TMP_LOG_DIR/lock_sql
LOGFILE=$TMP_LOG_DIR/`date '+%Y-%m-%d--%H:%M:%S'`_log.txt
CONFIG_FILE=$TMP_LOG_DIR/ldap_out_sql.txt
D_CVS_REPO=$HOME/conf_repo

INFO_MODE=DEBUG

CN=$1

# Load usefull functions
if [ ! -f $HOME/scripto/bash/bash_library.sh ]; then
  echo "[error] $HOME/scripto/bash/bash_library.sh not found. Exiting. "
  exit 1
else
  . $HOME/scripto/bash/bash_library.sh
fi

mkdir -p $TMP_LOG_DIR
check_directory "$TMP_LOG_DIR"

msgd "CN: $CN"
check_parameter $CN

msgd "Check LDAP for index hash to readonly user"
LINE=`$HOME/scripto/perl/ask_ldap.pl "(cn=$CN)" "['cn', 'orainfDbReadOnlyUser', 'orainfDbReadOnlyIndexHash']"`
msgd "LINE: $LINE"

V_USER=`echo $LINE | awk '{print $2}'`
msgd "V_USER: $V_USER"
check_parameter $V_USER

INDEX_HASH=`echo $LINE | awk '{print $3}'`
msgd "INDEX_HASH: $INDEX_HASH"
HASH=`echo "$INDEX_HASH" | base64 --decode -i`
msgd "HASH: $HASH"
if [ -f "$PWD_FILE" ]; then
  V_PASS=`cat $PWD_FILE | grep $HASH | awk '{print $2}' | base64 --decode -i`
  #msgd "V_PASS: $V_PASS"
else
  msge "Unable to find the password file. Exiting"
  exit 0
fi

msgd "Sanity check, trying to tnsping first to CN: $CN"
tnsping ${CN} > /tmp/run_initial_checks_tnsping.txt
if [ $? -eq 0 ]; then
  msgd "OK, tnsping works"
else
  msge "Error, tnsping $CN does not work. Skip this one."
  run_command_d "cat /tmp/run_initial_checks_tnsping.txt"
  continue
fi


# OK, I have username, password and the database, it is time to connect
testavail=`sqlplus -S /nolog <<EOF
set head off pagesize 0 echo off verify off feedback off heading off
connect $V_USER/$V_PASS@$CN
select trim(1) result from dual;
exit;
EOF`

msgd "Checking if I can connect to DB: $CN"
if [ "$testavail" != "1" ]; then
  msge "DB $CN not available, exiting !!"
  exit 1
fi

msgd "Actual execution. @refresh.sql what every_x_sec number_of_executions"
msgd "30 720 - this will take 6h"
msgd "30 960 - this will take 8h"
sqlplus -s /nolog << EOF 
connect $V_USER/$V_PASS@$CN
@refresh.sql ccm_currently_running 10 9
EOF


# On exit remove lock file
rm -f $LOCKFILE
